<todo>
    <h3>Java Simple To Do List</h3>

    <ul>
        <li each={ item in state.tasks }>
            <label class={ item.isDone ? 'completed' : null }>
            <input
                    type="checkbox"
                    checked={ item.isDone }
                    onclick={ ()=> toggle(item) } />
            { item.title }
            </label>
            <button class="del" onclick={ ()=> del(item) }>x</button>
        </li>
    </ul>

    <form onsubmit={ add }>
        <input onkeyup={ edit } placeholder="I want to..." value={ state.text }/>
        <button disabled={ !state.text }>ADD</button>
    </form>

    <script>
        export default {
          onBeforeMount(props, state) {
            this.state = {
              tasks: props.tasks,
              text: ''
            }
          },
          edit(e) {
            this.update({
              text: e.target.value
            })
          },
          add(e) {
            e.preventDefault()
            if (this.state.text) {
                var xhr = new XMLHttpRequest();
                xhr.open('POST', window.REST_URL, true);
                xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                xhr.onload = () => {
                    console.log(JSON.parse(xhr.response))
                    this.update({
                        tasks: [
                          ...this.state.tasks,
                          // add a new item
                          JSON.parse(xhr.response)
                        ]
                    })
                };
                xhr.send('title=' + this.state.text);
            }

            this.state.text = ''
          },
          toggle(item) {
            item.isDone = !item.isDone

            var xhr = new XMLHttpRequest();
            xhr.open('PUT', window.REST_URL, true);
            xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            xhr.onload = () => {
                this.update()
            };
            xhr.send('id=' + item.id);
          },
          del(item) {
            var xhr = new XMLHttpRequest();
            xhr.open('DELETE', window.REST_URL, true);
            xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            xhr.onload = () => {
                tasks = this.state.tasks.filter(function(t) {
                    return t.id != item.id;
                });
                this.update({
                    tasks: tasks
                })
            };
            xhr.send('id=' + item.id);
          }
        }
    </script>

    <style>
        todo {
          font-family: 'myriad pro', sans-serif;
          font-size: 20px;
          display: block;
          max-width: 400px;
          margin: 5% auto;
        }

        form input {
          font-size: 85%;
          padding: .4em;
          border: 1px solid #ccc;
          border-radius: 2px;
        }

        button {
          background-color: #1FADC5;
          border: 1px solid rgba(0,0,0,.2);
          font-size: 75%;
          color: #fff;
          padding: .4em 1.2em;
          border-radius: 2em;
          cursor: pointer;
          margin: 0 .23em;
          outline: none;
        }

        button[disabled] {
          background-color: #ddd;
          color: #aaa;
        }

        ul {
          width: 300px;
          padding: 7px 0 7px 0;
          border-bottom: 1px solid #CDCDCD;
          font-size: 75%;
        }

        li {
          list-style-type: none;
          padding: .2em 0;
        }

        .completed {
          text-decoration: line-through;
          color: #ccc;
        }

        label {
          cursor: pointer;
        }

        input {
          margin-right: 10px;
        }
        button.del {
          float: right;
        }
    </style>
</todo>